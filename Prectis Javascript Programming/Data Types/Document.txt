JavaScript has a variety of data types that can be divided into two main categories:
primitive types and objects data types. 
Understanding these data types is essential for effective programming in JavaScript.

### Primitive Data Types

1. **String**
   - Represents textual data.
   - Example:
     ```javascript
     let str = "Hello, world!";
     ```

2. **Number**
   - Represents both integer and floating-point numbers.
   - Example:
     ```javascript
     let num = 42;
     let float = 3.14;
     ```

3. **BigInt**
   - Represents integers with arbitrary precision.
   - Example:
     ```javascript
     let bigInt = 1234567890123456789012345678901234567890n;
     ```

4. **Boolean**
   - Represents logical values: `true` or `false`.
   - Example:
     ```javascript
     let isTrue = true;
     let isFalse = false;
     ```

5. **Undefined**
   - Represents a variable that has been declared but has not yet been assigned a value.
   - Example:
     ```javascript
     let unassigned;
     console.log(unassigned); // undefined
     ```

6. **Null**
   - Represents the intentional absence of any object value.
   - Example:
     ```javascript
     let empty = null;
     ```

7. **Symbol**
   - Represents a unique and immutable identifier.
   - Example:
     ```javascript
     let sym = Symbol("description");
     ```

### Object Data Types

1. **Object**
   - A collection of properties, where each property is a key-value pair.
   - Example:
     ```javascript
     let obj = {
       name: "John",
       age: 30
     };
     ```

2. **Array**
   - A special type of object used for storing ordered collections.
   - Example:
     ```javascript
     let arr = [1, 2, 3, 4, 5];
     ```

3. **Function**
   - A callable object that performs a specific task.
   - Example:
     ```javascript
     function greet(name) {
       return `Hello, ${name}!`;
     }
     ```

4. **Date**
   - An object representing a single moment in time.
   - Example:
     ```javascript
     let now = new Date();
     ```

5. **RegExp**
   - Objects used for matching text with patterns.
   - Example:
     ```javascript
     let regex = /hello/i;
     ```

6. **Map**
   - A collection of keyed data items, like an object but with additional features.
   - Example:
     ```javascript
     let map = new Map();
     map.set('key', 'value');
     ```

7. **Set**
   - A collection of unique values.
   - Example:
     ```javascript
     let set = new Set([1, 2, 3, 4, 4]);
     ```

### Special Data Types

1. **NaN (Not-a-Number)**
   - A special numeric value representing a computational error.
   - Example:
     ```javascript
     let result = Math.sqrt(-1); // NaN
     ```

2. **Infinity and -Infinity**
   - Special numeric values representing positive and negative infinity.
   - Example:
     ```javascript
     let positiveInfinity = Infinity;
     let negativeInfinity = -Infinity;
     ```

Understanding these data types and their uses is fundamental to writing effective and efficient JavaScript code.